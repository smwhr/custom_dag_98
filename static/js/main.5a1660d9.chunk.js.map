{"version":3,"sources":["utils.ts","media/initial.png","helpers/LayoutCells.tsx","steps/StepInitial.tsx","steps/StepAgency.tsx","helpers/Checkbox.tsx","steps/StepDate.tsx","steps/StepTask.tsx","steps/StepKpi.tsx","steps/StepFinished.tsx","steps/StepJSON.tsx","App.tsx","index.tsx"],"names":["range","start","end","Array","from","length","_","i","ContentCell","children","width","height","ButtonCell","top","left","style","textAlign","StepInitial","onNext","cancel","disabled","onClick","marginLeft","StepAgency","initialAgency","availableAgencies","onBack","onAgency","selectedAgency","setSelectedAgency","useState","onChange","event","target","value","defaultValue","map","agency","CheckBox","name","label","initial","this","key","toggle","render","id","type","checked","htmlFor","availableMonths","StepDate","initialPerimeter","availableYears","onTimePerimeter","initialPerimeterType","initialYear","split","initialMonths","isArray","p","selectedPerimeter","setSelectedPerimeter","selectedYear","setSelectedYear","selectedMonths","setSelectedMonths","defaultMonthCheckboxes","checkedMonths","checkboxes","filter","c","noneCheck","allCheck","includes","parseInt","year","slice","checkbox","monthStrings","m","StepTask","initialTasks","availableTasks","onTasks","selectedTasks","setSelectedTasks","defaultCheckboxes","task","StepKpi","initialKpi","availableKpis","onKpi","selectedKpi","setSelectedKpi","kpi","StepFinished","marginTop","center","middle","StepJSON","customDag","validCustomDag","JSON","stringify","kpiOb","console","log","tasks","time_perimeter","buildValidCustomDag","readOnly","text","initialState","reducer","state","action","payload","Error","App","agencies","setAgencies","kpis","setKpis","currentStep","setCurrentStep","dispatch","useReducer","useEffect","loadAgency","fetch","then","data","json","d","names","sort","loadKpis","match","Promise","all","Date","getFullYear","reverse","window98","useRef","window98state","setWin98State","className","ref","window","confirm","current","remove","display","columns","flow","src","leftImage","alt","initStepAgency","getMonth","perimeter","initStepDate","initStepTasks","initStepKpi","rootElement","document","getElementById"],"mappings":"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","file":"static/js/main.5a1660d9.chunk.js","sourcesContent":["let range = (start, end) => {\n  return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n};\n\nexport { range };\n","export default __webpack_public_path__ + \"static/media/initial.eca51b8e.png\";","import { Cell } from \"styled-css-grid\";\n\nconst ContentCell: React.FC = ({children}) => \n  <Cell width={8} height={2}>{children}</Cell>\n\nconst ButtonCell: React.FC = ({children}) => (\n    <Cell\n            height={1}\n            top={4}\n            left={5}\n            width={8}\n            style={{ textAlign: \"right\" }}\n          >{children}\n    </Cell>\n)\n\nexport {ContentCell, ButtonCell}","import { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\n\nconst StepInitial: React.FC<{ \n  onNext: () => void;\n  cancel: () => void;\n}> = ({ onNext, cancel }) => {\n  return (\n    <>\n      <ContentCell>\n        <p>\n          This wizard will help you create your custom DAG quickly and easily.\n        </p>\n        <p>To begin creating your custom DAG, click Next.</p>\n      </ContentCell>\n      <ButtonCell>\n        <button disabled>&lt; Back</button>\n        <button onClick={onNext}>Next &gt;</button>\n        &nbsp;\n        <button onClick={cancel} style={{ marginLeft: \"1em\" }}>Cancel</button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepInitial };\n","import { useState } from \"react\";\nimport { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\n\nconst StepAgency: React.FC<{\n  initialAgency: string;\n  availableAgencies: string[];\n  onBack: () => void;\n  onAgency: (agency: string) => void;\n  cancel: () => void;\n}> = ({ initialAgency, availableAgencies, onBack, onAgency, cancel }) => {\n  let [selectedAgency, setSelectedAgency] = useState(initialAgency);\n\n  const onNext = () => {\n    onAgency(selectedAgency);\n  };\n\n  return (\n    <>\n      <ContentCell>\n        \n        <h2>Select Agency</h2>\n        \n        <p>Select the agency :</p>\n        <div>\n          <select onChange={(event) => setSelectedAgency(event.target.value)}\n                  defaultValue={initialAgency}\n            >\n            {availableAgencies.map((agency) => (\n              <option key={agency} value={agency}>\n                {agency}\n              </option>\n            ))}\n          </select>\n        </div>\n      </ContentCell>\n      <ButtonCell>\n        <button onClick={onBack}>&lt; Back</button>\n        <button onClick={onNext}>Next &gt;</button>\n        &nbsp;\n        <button onClick={cancel} style={{ marginLeft: \"1em\" }}>Cancel</button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepAgency };\n","function CheckBox(name, label, onChange, initial=false){\n    this.name = name;\n    this.label = label;\n    this.key = name;\n    this.value = initial;\n    this.toggle = () => {\n        this.value = !this.value;\n    }\n\n    this.render = () => (\n        <div key={`task_${this.key}`}>\n            <input id={`task_${this.name}`} \n                   type=\"checkbox\" \n                   key={this.name} \n                   value={this.name} \n                   checked={this.value} \n                   onClick={() => this.toggle()}\n                   onChange={onChange}\n                   />\n            <label htmlFor={`task_${this.name}`}>\n                {this.label}\n            </label>\n        </div>\n    )\n}\n\nexport {CheckBox}","import { useState } from \"react\";\nimport { Cell, Grid } from \"styled-css-grid\";\nimport { CheckBox } from \"../helpers/Checkbox\";\nimport { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\nimport { range } from \"../utils\";\n\nconst availableMonths = [\n  { id: \"1\", name: \"January\" },\n  { id: \"2\", name: \"February\" },\n  { id: \"3\", name: \"March\" },\n  { id: \"4\", name: \"April\" },\n  { id: \"5\", name: \"May\" },\n  { id: \"6\", name: \"June\" },\n  { id: \"7\", name: \"July\" },\n  { id: \"8\", name: \"August\" },\n  { id: \"9\", name: \"September\" },\n  { id: \"10\", name: \"October\" },\n  { id: \"11\", name: \"November\" },\n  { id: \"12\", name: \"December\" }\n];\n\nconst StepDate: React.FC<{\n  initialPerimeter: string[] | \"all\";\n  availableYears: number[];\n  onBack: () => void;\n  onTimePerimeter: (perimeter: string[] | \"all\") => void;\n  cancel: () => void;\n}> = ({\n  initialPerimeter,\n  availableYears,\n  onBack,\n  onTimePerimeter,\n  cancel\n}) => {\n  const initialPerimeterType =\n    typeof initialPerimeter === \"string\"\n      ? \"all\"\n      : initialPerimeter.length === 0\n      ? \"none\"\n      : \"year_month\";\n  const initialYear =\n    initialPerimeterType === \"year_month\"\n      ? initialPerimeter[0].split(\"_\")[0]\n      : availableYears[0];\n\n  const initialMonths = Array.isArray(initialPerimeter)\n    ? initialPerimeter.map((p) => p.split(\"_\")[1])\n    : [];\n\n  let [selectedPerimeter, setSelectedPerimeter] = useState(\n    initialPerimeterType\n  );\n  let [selectedYear, setSelectedYear] = useState(initialYear);\n  let [selectedMonths, setSelectedMonths] = useState(initialMonths);\n\n  const onNext = () => {\n    if (selectedPerimeter === \"year_month\") {\n      const year = `${selectedYear}`;\n      const monthStrings =\n        selectedMonths.length === 0\n          ? range(1, 12).map((m) => `${year}_${m}`)\n          : selectedMonths.map((m) => `${year}_${m}`);\n      onTimePerimeter(monthStrings);\n    } else if (selectedPerimeter === \"all\") {\n      onTimePerimeter(\"all\");\n    } else if (selectedPerimeter === \"none\") {\n      onTimePerimeter([]);\n    }\n  };\n\n  const defaultMonthCheckboxes = availableMonths.map(\n    ({ id, name }) =>\n      new CheckBox(\n        id,\n        name,\n        () => {\n          const checkedMonths = checkboxes\n            .filter((c) => c.value)\n            .map((c) => c.name);\n          setSelectedMonths(checkedMonths);\n\n          noneCheck.value = checkedMonths.length === 0;\n          allCheck.value = checkedMonths.length === 12;\n        },\n        selectedMonths.includes(id)\n      )\n  );\n  let [checkboxes] = useState(defaultMonthCheckboxes);\n\n  let [allCheck] = useState(\n    new CheckBox(\"all\", \"Select all\", () => {\n      checkboxes.map((c) => {\n        c.value = true;\n        return c;\n      });\n      allCheck.value = true;\n      noneCheck.value = false;\n      setSelectedMonths(availableMonths.map(({ id }) => id));\n    })\n  );\n\n  let [noneCheck] = useState(\n    new CheckBox(\"none\", \"Deselect all\", () => {\n      checkboxes.map((c) => {\n        c.value = false;\n        return c;\n      });\n      noneCheck.value = true;\n      allCheck.value = false;\n      setSelectedMonths([]);\n    })\n  );\n  return (\n    <>\n      <ContentCell>\n        <h2>Select time perimeter</h2>\n\n        <fieldset disabled={selectedPerimeter !== \"year_month\"}>\n          <legend>\n            <input\n              type=\"radio\"\n              id=\"year_month_perimeter_type\"\n              name=\"time_perimeter_type\"\n              value=\"year_month\"\n              checked={selectedPerimeter === \"year_month\"}\n              onChange={(event) => setSelectedPerimeter(event.target.value)}\n            />\n            <label htmlFor=\"year_month_perimeter_type\">\n              Use a specific time perimeter (Recommended)\n            </label>\n          </legend>\n\n          <div>\n            <label>Please choose a year :</label>\n            <select\n              onChange={(event) =>\n                setSelectedYear(parseInt(event.target.value, 10))\n              }\n            >\n              {availableYears.map((year) => (\n                <option key={year} value={year}>\n                  {year}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <fieldset>\n            <legend>Months</legend>\n            <Grid>\n              <Cell width={4}>\n                {checkboxes.slice(0, 5).map((checkbox) => checkbox.render())}\n              </Cell>\n              <Cell width={4}>\n                {checkboxes.slice(5, 10).map((checkbox) => checkbox.render())}\n              </Cell>\n              <Cell width={4}>\n                {checkboxes.slice(10, 12).map((checkbox) => checkbox.render())}\n                <br />\n                {allCheck.render()}\n                {noneCheck.render()}\n              </Cell>\n            </Grid>\n          </fieldset>\n        </fieldset>\n\n        <input\n          type=\"radio\"\n          id=\"all_perimeter_type\"\n          name=\"time_perimeter_type\"\n          value=\"all\"\n          checked={selectedPerimeter === \"all\"}\n          onChange={(event) => setSelectedPerimeter(event.target.value)}\n        />\n        <label htmlFor=\"all_perimeter_type\">\n          Launch on all available year and months (Slow)\n        </label>\n\n        <input\n          type=\"radio\"\n          id=\"none_perimeter_type\"\n          name=\"time_perimeter_type\"\n          value=\"none\"\n          checked={selectedPerimeter === \"none\"}\n          onChange={(event) => setSelectedPerimeter(event.target.value)}\n        />\n        <label htmlFor=\"none_perimeter_type\">\n          Only compute the referential (Fast)\n        </label>\n      </ContentCell>\n      <ButtonCell>\n        <button onClick={onBack}>&lt; Back</button>\n        <button onClick={onNext}>Next &gt;</button>\n        &nbsp;\n        <button onClick={cancel} style={{ marginLeft: \"1em\" }}>\n          Cancel\n        </button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepDate };\n","import { useState } from \"react\";\nimport { CheckBox } from \"../helpers/Checkbox\";\nimport { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\n\nconst StepTask: React.FC<{\n  initialTasks: string[];\n  availableTasks: string[];\n  onBack: () => void;\n  cancel: () => void;\n  onTasks: (tasks: string[]) => void;\n}> = ({ initialTasks, availableTasks, onBack, cancel, onTasks }) => {\n\n  let [selectedTasks, setSelectedTasks] = useState(initialTasks);\n\n  const onNext = () => {\n    onTasks(selectedTasks);\n  };\n\n  const defaultCheckboxes = availableTasks.map(task => new CheckBox(task, task, () => {\n    setSelectedTasks(checkboxes.filter(c => c.value).map(c => c.name))\n  }, initialTasks.includes(task)));\n  let [checkboxes] = useState(defaultCheckboxes);\n\n  return (\n    <>\n      <ContentCell>\n        \n        <h2>Select Tasks</h2>\n        \n        <p>Select the task(s) to :</p>\n        <div>\n            {checkboxes.map((checkbox) => checkbox.render())}\n        </div>\n      </ContentCell>\n      <ButtonCell>\n        <button onClick={onBack}>&lt; Back</button>\n        <button onClick={onNext} disabled={selectedTasks.length < 1}>Next &gt;</button>\n        &nbsp;\n        <button onClick={cancel} style={{ marginLeft: \"1em\" }}>Cancel</button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepTask };\n","import { useState } from \"react\";\nimport { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\n\nconst StepKpi: React.FC<{\n  initialKpi: string;\n  availableKpis: string[];\n  onBack: () => void;\n  cancel: () => void;\n  onKpi: (kpi: string) => void;\n}> = ({ initialKpi, availableKpis, onBack, cancel, onKpi }) => {\n  let [selectedKpi, setSelectedKpi] = useState(initialKpi);\n\n  const onNext = () => {\n    onKpi(selectedKpi);\n  };\n\n  return (\n    <>\n      <ContentCell>\n        \n        <h2>Select Kpi</h2>\n        \n        <p>Select the kpi :</p>\n        <div>\n          <select onChange={(event) => setSelectedKpi(event.target.value)}\n                  defaultValue={initialKpi}\n            >\n            {availableKpis.map((kpi) => (\n              <option key={kpi} value={kpi}>\n                {kpi}\n              </option>\n            ))}\n          </select>\n        </div>\n      </ContentCell>\n      <ButtonCell>\n        <button onClick={onBack}>&lt; Back</button>\n        <button onClick={onNext}>Next &gt;</button>\n        &nbsp;\n        <button onClick={cancel} style={{ marginLeft: \"1em\" }}>Cancel</button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepKpi };\n","import { Cell, Grid } from \"styled-css-grid\";\nimport { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\n\nconst StepFinished: React.FC<{ \n    onBack: () => void; \n    onNext: () => void; \n    cancel: () => void;\n}> = ({ onBack, onNext, cancel }) => {\n  return (\n    <>\n      <ContentCell>\n        <h2>Wizard completed</h2>\n        <p>The custom DAG wizard saved all informations.</p>\n        <p>Click Finish to generate your custom DAG json.</p>\n\n        <div style={{marginTop: \"5em\"}}></div>\n        <Grid>\n          <Cell width={6}>\n            <button disabled>Add custom builds</button> \n          </Cell>\n          <Cell width={6} center middle>\n            \n          </Cell>\n          <Cell width={6}>\n            <button disabled>Add a custom notification</button> \n          </Cell>\n          <Cell width={6} center middle>\n            \n          </Cell>\n        </Grid>\n      </ContentCell>\n      <ButtonCell>\n        <button onClick={onBack}>&lt; Back</button>\n        <button onClick={onNext}>Finish</button>\n        &nbsp;\n        <button onClick={cancel} style={{ marginLeft: \"1em\" }}>Cancel</button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepFinished };\n","import { ButtonCell, ContentCell } from \"../helpers/LayoutCells\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\n\nconst buildValidCustomDag = (customDag) => {\n\n    let kpiOb = {}\n    console.log(customDag.tasks.includes(\"initialize-kpis\"))\n    if(customDag.kpi?.length > 0 && customDag.tasks.includes(\"initialize-kpis\")){\n        kpiOb = {\"kpi\" : customDag.kpi}\n    }\n\n    console.log(kpiOb)\n    \n    return {\n        [customDag.agency] : {\n            \"time_perimeter\": customDag.time_perimeter,\n            \"tasks\": customDag.tasks,\n            ...kpiOb\n        }\n    }\n}\n\nconst StepJSON: React.FC<{ \n    customDag: any;\n    onBack: () => void; \n}> = ({ customDag, onBack }) => {\n    \n    \n    const validCustomDag = JSON.stringify(buildValidCustomDag(customDag));\n    \n  return (\n    <>\n      <ContentCell>\n        <textarea style={{width: \"100%\", height: \"220px\"}} value={validCustomDag} readOnly>\n        </textarea>\n        \n        <CopyToClipboard text={validCustomDag}>\n          <button>Copy to clipboard</button>\n        </CopyToClipboard>\n      </ContentCell>\n      <ButtonCell>\n        <button onClick={onBack}>Cancel</button>\n      </ButtonCell>\n    </>\n  );\n};\n\nexport { StepJSON };\n","import \"./styles.css\";\nimport \"98.css\";\nimport { useEffect, useReducer, useRef, useState } from \"react\";\nimport { range } from \"./utils\";\nimport leftImage from \"./media/initial.png\";\n\nimport { Cell, Grid } from \"styled-css-grid\";\n\nimport { StepInitial } from \"./steps/StepInitial\";\nimport { StepAgency } from \"./steps/StepAgency\";\nimport { StepDate } from \"./steps/StepDate\";\nimport { StepTask } from \"./steps/StepTask\";\nimport { StepKpi } from \"./steps/StepKpi\";\nimport { StepFinished } from \"./steps/StepFinished\";\nimport { ContentCell } from \"./helpers/LayoutCells\";\nimport { StepJSON } from \"./steps/StepJSON\";\n\nconst initialState = {};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return {};\n    case \"agency\":\n      return { ...state, agency: action.payload };\n    case \"time_perimeter\":\n      return { ...state, time_perimeter: action.payload };\n    case \"tasks\":\n        return { ...state, tasks: action.payload };\n    case \"kpi\":\n        return { ...state, kpi: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nexport default function App() {\n  let [agencies, setAgencies] = useState<string[]>([]);\n  let [kpis, setKpis] = useState<string[]>([]);\n  let [currentStep, setCurrentStep] = useState<Step>(\"loading\");\n\n  const [customDag, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    console.log(\"Fetching agencies\");\n    const loadAgency = fetch(\"https://django.gateway.staging.cit.io/agencies/\")\n      .then((data) => data.json())\n      .then((data: { name: string }[]) => data.map((d) => d.name))\n      .then((names) => setAgencies(names.sort()));\n\n    console.log(\"Fetching kpis\");\n    const loadKpis = fetch(\"https://docs.api.staging.cit.io/_sources/api/kpis.rst.txt\")\n      .then((data) => data.text())\n      .then((data) => data.match(/kpis\\.(.*)/g))\n      .then((names) => names.map(name => name.split(\".\")[1]))\n      .then((names) => {\n        // console.log(names)\n        setKpis(names.sort())\n      });\n\n    \n      Promise.all([loadAgency, loadKpis ])\n             .then(() => setCurrentStep(\"initial\"))\n\n  }, []);\n\n  const availableYears = range(2018, new Date().getFullYear()).reverse();\n  const availableTasks = [\n    \"write-ctfs-to-gcloud\",\n    \"initialize-ctfs\",\n    \"clean-models\",\n    \"initialize-cs-models\",\n    \"initialize-kpis\",\n    \"initialize-serialized-courses\",\n    \"initialize-service-dates\",\n    \"generate-report\",\n    \"clusterize-kpis\",\n    \"run-prediction\"\n  ];\n\n  const cancel = () => {\n    dispatch({ type: \"reset\" })\n    setCurrentStep(\"initial\");\n  }\n\n  const initStepJSON = () => {\n    return <StepJSON \n              customDag={customDag}\n              onBack={() => {\n              setCurrentStep(\"end\");\n              }}\n            />;\n  }\n\n  const initFinished = () => {\n    const onNext = () => {\n      setCurrentStep(\"json\");\n    };\n    return <StepFinished \n              onBack={() => {\n                setCurrentStep(\"task\");\n              }}\n              onNext={onNext}\n              cancel={cancel}\n            />;\n  };\n\n  const initStepKpi = () => {\n    const initialKpi = customDag.kpi || kpis[0] || \"\";\n    return (\n      <StepKpi\n        initialKpi={initialKpi}\n        availableKpis={kpis}\n        onBack={() => {\n          setCurrentStep(\"task\");\n        }}\n        cancel={cancel}\n        onKpi={(kpi: string) => {\n          dispatch({ type: \"kpi\", payload: kpi });\n          setCurrentStep(\"end\");\n        }}\n      />\n    );\n  };\n\n  const initStepTasks = () => {\n    const initialTasks = customDag.tasks || [];\n    return (\n      <StepTask\n        initialTasks={initialTasks}\n        availableTasks={availableTasks}\n        onBack={() => {\n          setCurrentStep(\"date\");\n        }}\n        cancel={cancel}\n        onTasks={(tasks: string[]) => {\n          dispatch({ type: \"tasks\", payload: tasks });\n          if(tasks.includes(\"initialize-kpis\")){\n            setCurrentStep(\"kpi\");\n          }else{\n            setCurrentStep(\"end\");\n          }\n        }}\n      />\n    );\n  };\n\n  const initStepDate = () => {\n    const initialPerimeter = customDag.time_perimeter || [`${availableYears[0]}_${ (new Date()).getMonth()}`];\n    return (\n      <StepDate\n        initialPerimeter={initialPerimeter}\n        availableYears={availableYears}\n        onBack={() => {\n          setCurrentStep(\"agency\");\n        }}\n        cancel={cancel}\n        onTimePerimeter={(perimeter: string[] | \"all\") => {\n          dispatch({ type: \"time_perimeter\", payload: perimeter });\n          setCurrentStep(\"task\");\n        }}\n      />\n    );\n  };\n\n  const initStepAgency = () => {\n    const initialAgency = customDag.agency || agencies[0] || \"\";\n    return (\n      <StepAgency\n        initialAgency={initialAgency}\n        availableAgencies={agencies}\n        onBack={() => {\n          setCurrentStep(\"initial\");\n        }}\n        cancel={cancel}\n        onAgency={(agency: string) => {\n          dispatch({ type: \"agency\", payload: agency });\n          setCurrentStep(\"date\");\n        }}\n      />\n    );\n  };\n\n  const initStepInitial = () => {\n    const onNext = () => {\n      setCurrentStep(\"agency\");\n    };\n    return <StepInitial onNext={onNext} cancel={cancel} />;\n  };\n\n  const initLoading = () => (\n        <ContentCell>\n          Preparing the wizard... <br /><br />\n          Agencies {agencies.length === 0 ? \"loading...\" : \"loaded.\"} <br /><br />\n          KPI {kpis.length === 0 ? \"loading...\" : \"loaded.\"}\n        </ContentCell>\n      )\n\n  //fun stuffs\n  const window98 = useRef(null)\n  const [window98state, setWin98State] = useState(\"normal\");\n  \n  const maximize = () => {\n    setWin98State(\"maximized\")\n  }\n  const restore = () => {\n    setWin98State(\"normal\")\n  }\n  const minimize = () => {\n    setWin98State(\"minimized\")\n  }\n\n  const close = () => {\n    let confirmClose = window.confirm(\"Are you sure your want to quit the wizard ?\")\n    if(confirmClose) window98.current.remove();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"window\" ref={window98} style={{ \n            width: (window98state === \"normal\" ? \"490px\" \n                 : window98state === \"minimized\" ? \"200px\"\n                 : window98state === \"maximized\" ? \"100%\"\n                 : \"480px\")\n        }}>\n        <div className=\"title-bar\">\n          <div className=\"title-bar-text\">Custom DAG Wizard</div>\n          <div className=\"title-bar-controls\">\n            {window98state !== \"minimized\" ?<button aria-label=\"Minimize\" onClick={minimize}></button> : null}\n            {window98state !== \"maximized\" && window98state !== \"minimized\"  ? <button aria-label=\"Maximize\" onClick={maximize}></button> : null}\n            {window98state !== \"normal\" ? <button aria-label=\"Restore\" onClick={restore}></button> : null}\n            <button aria-label=\"Close\" onClick={close}></button>\n          </div>\n        </div>\n        <div className=\"window-body\" style={{display: window98state === \"minimized\" ? \"none\" : \"block\"}}>\n        <Grid columns={12} flow=\"row dense\">\n          <Cell width={4} height={4}>\n            <img src={leftImage} alt=\"\" />\n          </Cell>\n          <>\n            {\n               currentStep === \"loading\" ? initLoading()\n             : currentStep === \"initial\" ? initStepInitial()\n             : currentStep === \"agency\" ? initStepAgency()\n             : currentStep === \"date\" ? initStepDate()\n             : currentStep === \"task\" ? initStepTasks()\n             : currentStep === \"kpi\" ? initStepKpi()\n             : currentStep === \"end\" ? initFinished()\n             : currentStep === \"json\" ? initStepJSON()\n             : <p>Step undefined !</p>\n            }\n          </>\n        </Grid>\n          \n        </div>\n      </div>\n      <div>\n      {/* <pre>{JSON.stringify(customDag)}</pre> */}\n      </div>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}